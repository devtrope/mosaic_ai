{% extends 'base.html.twig' %}

{% block title %}{{ project.name }} - Kanban{% endblock %}

{% block head %}
    <style>
    .add-column-btn {
        background: #43e97b;
        color: #fff;
        border: none;
        border-radius: 10px;
        padding: 1.1rem 1.2rem;
        font-size: 1rem;
        cursor: pointer;
        min-width: 220px;
        margin-top: 2.2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
        transition: background 0.2s;
    }
    .add-column-btn:hover {
        background: #38f9d7;
        color: #23272f;
    }
    .add-task-btn {
        background: #fff;
        color: #43e97b;
        border: 1px solid #43e97b;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-size: 0.97rem;
        cursor: pointer;
        margin-top: 0.7rem;
        width: 100%;
        transition: background 0.2s, color 0.2s;
    }
    .add-task-btn:hover {
        background: #43e97b;
        color: #fff;
    }
    .kanban-task[draggable="true"] {
        cursor: grab;
        opacity: 1;
        transition: box-shadow 0.15s, transform 0.15s, opacity 0.2s;
    }
    .kanban-task.dragging {
        opacity: 0.5;
    }
    .kanban-column.drop-hover {
        background: #e0ffe6;
        transition: background 0.2s;
    }
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0; top: 0; width: 100vw; height: 100vh;
        background: rgba(0,0,0,0.3);
        align-items: center;
        justify-content: center;
    }
    .modal.active { display: flex; }
    .modal-content {
        background: #fff;
        border-radius: 12px;
        padding: 2rem 2.5rem;
        min-width: 320px;
        box-shadow: 0 4px 24px rgba(0,0,0,0.18);
        position: relative;
    }
    .modal-content h2 { margin-top: 0; }
    .close-modal {
        position: absolute;
        right: 1rem; top: 1rem;
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
    }
    .modal-content input, .modal-content textarea {
        width: 100%;
        margin-bottom: 1rem;
        padding: 0.7rem;
        border-radius: 6px;
        border: 1px solid #e0e0e0;
        font-size: 1rem;
    }
    .modal-content button[type="submit"] {
        background: #23272f;
        color: #fff;
        border: none;
        padding: 0.7rem 1.5rem;
        border-radius: 6px;
        font-size: 1rem;
        cursor: pointer;
    }
    .task-labels {
        margin-bottom: 0.5rem;
        display: flex;
        gap: 0.4rem;
        flex-wrap: wrap;
    }
    .task-label {
        background: #f6d365;
        color: #23272f;
        border-radius: 6px;
        padding: 0.2rem 0.7rem;
        font-size: 0.85rem;
        font-weight: 600;
        display: inline-block;
    }
    .edit-labels-list {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
        margin-bottom: 1rem;
    }
    .edit-label-item {
        display: flex;
        align-items: center;
        gap: 0.4rem;
    }
    </style>
{% endblock %}

{% block content %}
{% set label_defs = {
    'feature': {'name': 'feature', 'color': '#3498db'},
    'bug': {'name': 'bug', 'color': '#e74c3c'},
    'enhancement': {'name': 'enhancement', 'color': '#43e97b'}
} %}
{# Simulation dynamique : associer des libellés à chaque tâche selon son id #}
{% set task_labels = {} %}
{% for column in kanban %}
    {% for task in column.tasks %}
        {% set _ = task_labels.update({ (task.id): (
            task.id % 3 == 1 ? ['feature'] :
            task.id % 3 == 2 ? ['bug', 'enhancement'] :
            ['enhancement']
        ) }) %}
    {% endfor %}
{% endfor %}
{# Charger tous les libellés disponibles #}
{% set all_labels = [] %}
{% for label in labels %}
    {% set _ = all_labels.append(label) %}
{% endfor %}
<div class="asana-layout">
    <aside class="sidebar">
        <div class="sidebar-logo">
            <img src="/assets/images/mosaic-logo.png" alt="Logo Mosaic" style="height: 40px;">
        </div>
        <nav>
            <ul>
                <li><a href="/">Accueil</a></li>
                <li class="active"><span>Projets</span></li>
                <li><span>Tâches</span></li>
                <li><span>Favoris</span></li>
            </ul>
        </nav>
    </aside>
    <section class="main-content">
        <header class="main-header">
            <h2>{{ project.name }}</h2>
            <div class="header-actions">
                <input type="text" placeholder="Rechercher..." class="search-bar">
                <div class="avatar"></div>
            </div>
        </header>
        <div class="kanban-board">
            {% for column in kanban %}
                <div class="kanban-column" data-column="{{ column.id }}">
                    <h3>{{ column.title }}</h3>
                    <div class="kanban-tasks">
                        {% for task in column.tasks %}
                            <div class="kanban-task" draggable="true" data-task="{{ task.id }}" data-column="{{ column.id }}" data-title="{{ task.title|e }}" data-description="{{ task.description|e }}" data-labels="{{ task.labels|map(l => l.id)|join(',') }}">
                                <div class="task-labels">
                                    {% for label in task.labels %}
                                        <span class="task-label" style="background: {{ label.color }}; color: #fff;">{{ label.name }}</span>
                                    {% endfor %}
                                </div>
                                <strong>{{ task.title }}</strong>
                                <p>{{ task.description }}</p>
                            </div>
                        {% endfor %}
                    </div>
                    <button class="add-task-btn" data-column="{{ column.id }}">+ Nouvelle tâche</button>
                </div>
            {% endfor %}
            <button class="add-column-btn" id="openAddColumnModal">+ Nouvelle colonne</button>
        </div>
    </section>
</div>

<div class="modal" id="addColumnModal">
    <div class="modal-content">
        <button class="close-modal" id="closeAddColumnModal">&times;</button>
        <h2>Nouvelle colonne</h2>
        <form method="post" action="">
            <input type="text" name="column_title" placeholder="Nom de la colonne" required>
            <button type="submit">Créer</button>
        </form>
    </div>
</div>

{# Modales d'ajout de tâche pour chaque colonne #}
{% for column in kanban %}
<div class="modal" id="addTaskModal-{{ column.id }}">
    <div class="modal-content">
        <button class="close-modal" data-close-task-modal="{{ column.id }}">&times;</button>
        <h2>Nouvelle tâche dans "{{ column.title }}"</h2>
        <form method="post" action="">
            <input type="hidden" name="task_column_id" value="{{ column.id }}">
            <input type="text" name="task_title" placeholder="Titre de la tâche" required>
            <textarea name="task_description" placeholder="Description" rows="3"></textarea>
            <button type="submit">Créer</button>
        </form>
    </div>
</div>
{% endfor %}

{# Modale d'édition de tâche #}
<div class="modal" id="editTaskModal">
    <div class="modal-content">
        <button class="close-modal" id="closeEditTaskModal">&times;</button>
        <h2>Modifier la tâche</h2>
        <form method="post" id="editTaskForm">
            <input type="hidden" name="edit_task_id" id="edit_task_id">
            <input type="text" name="edit_task_title" id="edit_task_title" placeholder="Titre" required>
            <textarea name="edit_task_description" id="edit_task_description" placeholder="Description" rows="3"></textarea>
            <div style="margin-bottom:1rem;">
                <strong>Libellés :</strong><br>
                <div class="edit-labels-list">
                    {% for label in labels %}
                        <label class="edit-label-item">
                            <input type="checkbox" name="edit_task_labels[]" value="{{ label.id }}" class="edit-task-label-checkbox" data-label-id="{{ label.id }}">
                            <span class="task-label" style="background: {{ label.color }}; color: #fff;">{{ label.name }}</span>
                        </label>
                    {% endfor %}
                </div>
            </div>
            <button type="submit">Enregistrer</button>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Modale colonne
        const openColBtn = document.getElementById('openAddColumnModal');
        const closeColBtn = document.getElementById('closeAddColumnModal');
        const colModal = document.getElementById('addColumnModal');
        if (openColBtn && closeColBtn && colModal) {
            openColBtn.onclick = () => colModal.classList.add('active');
            closeColBtn.onclick = () => colModal.classList.remove('active');
            window.onclick = (e) => { if (e.target === colModal) colModal.classList.remove('active'); };
        }
        // Modales tâches
        document.querySelectorAll('.add-task-btn').forEach(btn => {
            btn.onclick = function() {
                const colId = btn.getAttribute('data-column');
                const modal = document.getElementById('addTaskModal-' + colId);
                if (modal) modal.classList.add('active');
            };
        });
        document.querySelectorAll('.close-modal[data-close-task-modal]').forEach(btn => {
            btn.onclick = function() {
                const colId = btn.getAttribute('data-close-task-modal');
                const modal = document.getElementById('addTaskModal-' + colId);
                if (modal) modal.classList.remove('active');
            };
        });
        // Fermer modale tâche en cliquant sur le fond
        document.querySelectorAll('.modal[id^="addTaskModal-"]').forEach(modal => {
            modal.onclick = function(e) {
                if (e.target === modal) modal.classList.remove('active');
            };
        });

        // Drag & Drop full JS
        let draggedTaskId = null;
        document.querySelectorAll('.kanban-task[draggable="true"]').forEach(task => {
            task.addEventListener('dragstart', function(e) {
                draggedTaskId = task.getAttribute('data-task');
                task.classList.add('dragging');
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/plain', draggedTaskId);
            });
            task.addEventListener('dragend', function() {
                draggedTaskId = null;
                task.classList.remove('dragging');
            });
            // Permettre le drop entre tâches
            task.addEventListener('dragover', function(e) {
                e.preventDefault();
                task.classList.add('drop-hover');
            });
            task.addEventListener('dragleave', function() {
                task.classList.remove('drop-hover');
            });
            task.addEventListener('drop', function(e) {
                e.preventDefault();
                e.stopPropagation();
                task.classList.remove('drop-hover');
                const targetColId = task.getAttribute('data-column');
                const targetTaskId = task.getAttribute('data-task');
                const taskId = e.dataTransfer.getData('text/plain');
                if (taskId && targetColId && targetTaskId && taskId !== targetTaskId) {
                    fetch('/api/task/move.php', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ task_id: taskId, column_id: targetColId, before_task_id: targetTaskId })
                    })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            // Insérer la tâche déplacée avant la tâche cible
                            const taskElem = document.querySelector('.kanban-task[data-task="' + taskId + '"]');
                            if (taskElem) task.parentNode.insertBefore(taskElem, task);
                        } else {
                            alert('Erreur lors du déplacement de la tâche.');
                        }
                    })
                    .catch(() => alert('Erreur lors du déplacement de la tâche.'));
                }
            });
        });
        document.querySelectorAll('.kanban-column').forEach(col => {
            col.addEventListener('dragover', function(e) {
                e.preventDefault();
                col.classList.add('drop-hover');
            });
            col.addEventListener('dragleave', function() {
                col.classList.remove('drop-hover');
            });
            col.addEventListener('drop', function(e) {
                e.preventDefault();
                e.stopPropagation();
                col.classList.remove('drop-hover');
                const taskId = e.dataTransfer.getData('text/plain');
                if (taskId) {
                    const targetColId = col.getAttribute('data-column');
                    // Drop à la fin de la colonne
                    fetch('/api/task/move.php', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ task_id: taskId, column_id: targetColId })
                    })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            // Déplacer la tâche à la fin
                            const taskElem = document.querySelector('.kanban-task[data-task="' + taskId + '"]');
                            if (taskElem) col.querySelector('.kanban-tasks').appendChild(taskElem);
                        } else {
                            alert('Erreur lors du déplacement de la tâche.');
                        }
                    })
                    .catch(() => alert('Erreur lors du déplacement de la tâche.'));
                }
            });
        });

        // Modale édition tâche
        const editModal = document.getElementById('editTaskModal');
        const closeEditBtn = document.getElementById('closeEditTaskModal');
        const editForm = document.getElementById('editTaskForm');
        document.querySelectorAll('.kanban-task').forEach(taskElem => {
            taskElem.addEventListener('click', function(e) {
                if (e.target.classList.contains('add-task-btn')) return;
                // Pré-remplir les champs
                document.getElementById('edit_task_id').value = taskElem.getAttribute('data-task');
                document.getElementById('edit_task_title').value = taskElem.getAttribute('data-title');
                document.getElementById('edit_task_description').value = taskElem.getAttribute('data-description');
                // Libellés
                const checkedLabels = (taskElem.getAttribute('data-labels')||'').split(',').filter(Boolean);
                document.querySelectorAll('.edit-task-label-checkbox').forEach(cb => {
                    cb.checked = checkedLabels.includes(cb.value);
                });
                editModal.classList.add('active');
            });
        });
        closeEditBtn.onclick = () => editModal.classList.remove('active');
        window.onclick = (e) => { if (e.target === editModal) editModal.classList.remove('active'); };
    });
</script>
{% endblock %} 