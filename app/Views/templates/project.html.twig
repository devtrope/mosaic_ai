{% extends 'base.html.twig' %}

{% block title %}{{ project.name }} - Kanban{% endblock %}

{% block head %}
    <style>
    .add-column-btn {
        background: #43e97b;
        color: #fff;
        border: none;
        border-radius: 10px;
        padding: 1.1rem 1.2rem;
        font-size: 1rem;
        cursor: pointer;
        min-width: 220px;
        margin-top: 2.2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
        transition: background 0.2s;
    }
    .add-column-btn:hover {
        background: #38f9d7;
        color: #23272f;
    }
    .add-task-btn {
        background: #fff;
        color: #43e97b;
        border: 1px solid #43e97b;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-size: 0.97rem;
        cursor: pointer;
        margin-top: 0.7rem;
        width: 100%;
        transition: background 0.2s, color 0.2s;
    }
    .add-task-btn:hover {
        background: #43e97b;
        color: #fff;
    }
    .kanban-task[draggable="true"] {
        cursor: grab;
        opacity: 1;
        transition: box-shadow 0.15s, transform 0.15s, opacity 0.2s;
    }
    .kanban-task.dragging {
        opacity: 0.5;
    }
    .kanban-column.drop-hover {
        background: #e0ffe6;
        transition: background 0.2s;
    }
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0; top: 0; width: 100vw; height: 100vh;
        background: rgba(0,0,0,0.3);
        align-items: center;
        justify-content: center;
    }
    .modal.active { display: flex; }
    .modal-content {
        background: #fff;
        border-radius: 12px;
        padding: 2rem 2.5rem;
        min-width: 320px;
        box-shadow: 0 4px 24px rgba(0,0,0,0.18);
        position: relative;
    }
    .modal-content h2 { margin-top: 0; }
    .close-modal {
        position: absolute;
        right: 1rem; top: 1rem;
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
    }
    .modal-content input, .modal-content textarea {
        width: 100%;
        margin-bottom: 1rem;
        padding: 0.7rem;
        border-radius: 6px;
        border: 1px solid #e0e0e0;
        font-size: 1rem;
    }
    .modal-content button[type="submit"] {
        background: #23272f;
        color: #fff;
        border: none;
        padding: 0.7rem 1.5rem;
        border-radius: 6px;
        font-size: 1rem;
        cursor: pointer;
    }
    .task-labels {
        margin-bottom: 0.5rem;
        display: flex;
        gap: 0.4rem;
        flex-wrap: wrap;
    }
    .task-label {
        background: #f6d365;
        color: #23272f;
        border-radius: 6px;
        padding: 0.2rem 0.7rem;
        font-size: 0.85rem;
        font-weight: 600;
        display: inline-block;
    }
    .edit-labels-list {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
        margin-bottom: 1rem;
    }
    .edit-label-item {
        display: flex;
        align-items: center;
        gap: 0.4rem;
    }
    </style>
{% endblock %}

{% block content %}
{% set label_defs = {
    'feature': {'name': 'feature', 'color': '#3498db'},
    'bug': {'name': 'bug', 'color': '#e74c3c'},
    'enhancement': {'name': 'enhancement', 'color': '#43e97b'}
} %}
{# Simulation dynamique : associer des libellés à chaque tâche selon son id #}
{% set task_labels = {} %}
{% for column in kanban %}
    {% for task in column.tasks %}
        {% set _ = task_labels.update({ (task.id): (
            task.id % 3 == 1 ? ['feature'] :
            task.id % 3 == 2 ? ['bug', 'enhancement'] :
            ['enhancement']
        ) }) %}
    {% endfor %}
{% endfor %}
{# Charger tous les libellés disponibles #}
{% set all_labels = [] %}
{% for label in labels %}
    {% set _ = all_labels.append(label) %}
{% endfor %}
<div class="asana-layout">
    <aside class="sidebar">
        <div class="sidebar-logo">
            <img src="/assets/images/mosaic-logo.png" alt="Logo Mosaic" style="height: 40px;">
        </div>
        <nav>
            <ul>
                <li><a href="/">Accueil</a></li>
                <li class="active"><span>Projets</span></li>
                <li><span>Tâches</span></li>
                <li><span>Favoris</span></li>
            </ul>
        </nav>
    </aside>
    <section class="main-content">
        <header class="main-header">
            <h2>{{ project.name }}</h2>
            <div class="header-actions">
                <input type="text" placeholder="Rechercher..." class="search-bar">
                <div class="avatar"></div>
            </div>
        </header>
        <div class="kanban-board">
            {% for column in kanban %}
                <div class="kanban-column" data-column="{{ column.id }}">
                    <h3>{{ column.title }}</h3>
                    <div class="kanban-tasks">
                        {% for task in column.tasks %}
                            <div class="kanban-task" draggable="true" data-task="{{ task.id }}" data-column="{{ column.id }}" data-title="{{ task.title|e }}" data-description="{{ task.description|e }}" data-labels="{{ task.labels|map(l => l.id)|join(',') }}">
                                <div class="task-labels">
                                    {% for label in task.labels %}
                                        <span class="task-label" style="background: {{ label.color }}; color: #fff;">{{ label.name }}</span>
                                    {% endfor %}
                                </div>
                                <strong>{{ task.title }}</strong>
                                <p>{{ task.description }}</p>
                            </div>
                        {% endfor %}
                    </div>
                    <button class="add-task-btn" data-column="{{ column.id }}">+ Nouvelle tâche</button>
                </div>
            {% endfor %}
            <button class="add-column-btn" id="openAddColumnModal">+ Nouvelle colonne</button>
        </div>
    </section>
</div>

<div class="modal" id="addColumnModal">
    <div class="modal-content">
        <button class="close-modal" id="closeAddColumnModal">&times;</button>
        <h2>Nouvelle colonne</h2>
        <form method="post" action="">
            <input type="text" name="column_title" placeholder="Nom de la colonne" required>
            <button type="submit">Créer</button>
        </form>
    </div>
</div>

{# Modales d'ajout de tâche pour chaque colonne #}
{% for column in kanban %}
<div class="modal" id="addTaskModal-{{ column.id }}">
    <div class="modal-content">
        <button class="close-modal" data-close-task-modal="{{ column.id }}">&times;</button>
        <h2>Nouvelle tâche dans "{{ column.title }}"</h2>
        <form method="post" action="">
            <input type="hidden" name="task_column_id" value="{{ column.id }}">
            <input type="text" name="task_title" placeholder="Titre de la tâche" required>
            <textarea name="task_description" placeholder="Description" rows="3"></textarea>
            <div style="margin-bottom:1rem;">
                <strong>Libellés :</strong><br>
                <div class="add-task-labels-list">
                    {% for label in labels %}
                        <label class="add-label-item">
                            <input type="checkbox" name="task_labels[]" value="{{ label.id }}" class="add-task-label-checkbox" data-label-id="{{ label.id }}">
                            <span class="task-label" style="background: {{ label.color }}; color: #fff;">{{ label.name }}</span>
                        </label>
                    {% endfor %}
                </div>
            </div>
            <button type="submit">Créer</button>
        </form>
    </div>
</div>
{% endfor %}

{# Modale d'édition de tâche #}
<div class="modal" id="editTaskModal">
    <div class="modal-content">
        <button class="close-modal" id="closeEditTaskModal">&times;</button>
        <h2>Modifier la tâche</h2>
        <form method="post" id="editTaskForm">
            <input type="hidden" name="edit_task_id" id="edit_task_id">
            <input type="text" name="edit_task_title" id="edit_task_title" placeholder="Titre" required>
            <textarea name="edit_task_description" id="edit_task_description" placeholder="Description" rows="3"></textarea>
            <div style="margin-bottom:1rem;">
                <strong>Libellés :</strong><br>
                <div class="edit-labels-list" id="editLabelsList">
                    {% for label in labels %}
                        <label class="edit-label-item">
                            <input type="checkbox" name="edit_task_labels[]" value="{{ label.id }}" class="edit-task-label-checkbox" data-label-id="{{ label.id }}">
                            <span class="task-label" style="background: {{ label.color }}; color: #fff;">{{ label.name }}</span>
                        </label>
                    {% endfor %}
                </div>
                <form id="addLabelForm" style="display:flex; gap:0.5rem; align-items:center; margin-top:0.7rem;">
                    <input type="text" id="newLabelName" placeholder="Nom du libellé" required style="padding:0.3rem 0.7rem; border-radius:6px; border:1px solid #e0e0e0;">
                    <input type="color" id="newLabelColor" value="#43e97b" style="width:2.2rem; height:2.2rem; border:none;">
                    <button type="button" id="addLabelBtn" style="background:#23272f; color:#fff; border:none; border-radius:6px; padding:0.4rem 1rem; cursor:pointer;">Ajouter</button>
                </form>
            </div>
            <button type="button" id="editTaskFormBtn">Enregistrer</button>
        </form>
    </div>
</div>

<script>
function attachAddTaskBtnListeners() {
    document.querySelectorAll('.add-task-btn').forEach(btn => {
        if (btn._addTaskBtnAttached) return;
        btn.onclick = function() {
            const colId = btn.getAttribute('data-column');
            const modal = document.getElementById('addTaskModal-' + colId);
            if (modal) modal.classList.add('active');
        };
        btn._addTaskBtnAttached = true;
    });
}

function attachKanbanListeners() {
    // Clic sur une tâche pour ouvrir la modale d'édition
    document.querySelectorAll('.kanban-task').forEach(taskElem => {
        if (taskElem._kanbanClickAttached) return;
        taskElem.addEventListener('click', function(e) {
            if (e.target.classList.contains('add-task-btn')) return;
            document.getElementById('edit_task_id').value = taskElem.getAttribute('data-task');
            document.getElementById('edit_task_title').value = taskElem.getAttribute('data-title');
            document.getElementById('edit_task_description').value = taskElem.getAttribute('data-description');
            const checkedLabels = (taskElem.getAttribute('data-labels')||'').split(',').filter(Boolean);
            document.querySelectorAll('.edit-task-label-checkbox').forEach(cb => {
                cb.checked = checkedLabels.includes(cb.value);
            });
            document.getElementById('editTaskModal').classList.add('active');
        });
        taskElem._kanbanClickAttached = true;
    });
    // Drag & Drop
    document.querySelectorAll('.kanban-task[draggable="true"]').forEach(task => {
        if (task._kanbanDragAttached) return;
        task.addEventListener('dragstart', function(e) {
            window.draggedTaskId = task.getAttribute('data-task');
            task.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/plain', window.draggedTaskId);
        });
        task.addEventListener('dragend', function() {
            window.draggedTaskId = null;
            task.classList.remove('dragging');
        });
        task.addEventListener('dragover', function(e) {
            e.preventDefault();
            task.classList.add('drop-hover');
        });
        task.addEventListener('dragleave', function() {
            task.classList.remove('drop-hover');
        });
        task.addEventListener('drop', function(e) {
            e.preventDefault();
            e.stopPropagation();
            task.classList.remove('drop-hover');
            const targetColId = task.getAttribute('data-column');
            const targetTaskId = task.getAttribute('data-task');
            const taskId = e.dataTransfer.getData('text/plain');
            if (taskId && targetColId && targetTaskId && taskId !== targetTaskId) {
                fetch('/api/task/move.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ task_id: taskId, column_id: targetColId, before_task_id: targetTaskId })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        const taskElem = document.querySelector('.kanban-task[data-task="' + taskId + '"]');
                        if (taskElem) task.parentNode.insertBefore(taskElem, task);
                    } else {
                        alert('Erreur lors du déplacement de la tâche.');
                    }
                })
                .catch(() => alert('Erreur lors du déplacement de la tâche.'));
            }
        });
        task._kanbanDragAttached = true;
    });
    document.querySelectorAll('.kanban-column').forEach(col => {
        if (col._kanbanColDropAttached) return;
        col.addEventListener('dragover', function(e) {
            e.preventDefault();
            col.classList.add('drop-hover');
        });
        col.addEventListener('dragleave', function() {
            col.classList.remove('drop-hover');
        });
        col.addEventListener('drop', function(e) {
            e.preventDefault();
            e.stopPropagation();
            col.classList.remove('drop-hover');
            const taskId = e.dataTransfer.getData('text/plain');
            if (taskId) {
                const targetColId = col.getAttribute('data-column');
                fetch('/api/task/move.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ task_id: taskId, column_id: targetColId })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        const taskElem = document.querySelector('.kanban-task[data-task="' + taskId + '"]');
                        if (taskElem) col.querySelector('.kanban-tasks').appendChild(taskElem);
                    } else {
                        alert('Erreur lors du déplacement de la tâche.');
                    }
                })
                .catch(() => alert('Erreur lors du déplacement de la tâche.'));
            }
        });
        col._kanbanColDropAttached = true;
    });
    attachAddTaskBtnListeners();
}

document.addEventListener('DOMContentLoaded', function() {
    // Modale colonne
    const openColBtn = document.getElementById('openAddColumnModal');
    const closeColBtn = document.getElementById('closeAddColumnModal');
    const colModal = document.getElementById('addColumnModal');
    if (openColBtn && closeColBtn && colModal) {
        openColBtn.onclick = () => colModal.classList.add('active');
        closeColBtn.onclick = () => colModal.classList.remove('active');
        window.onclick = (e) => { if (e.target === colModal) colModal.classList.remove('active'); };
    }
    // Modales tâches
    document.querySelectorAll('.close-modal[data-close-task-modal]').forEach(btn => {
        btn.onclick = function() {
            const colId = btn.getAttribute('data-close-task-modal');
            const modal = document.getElementById('addTaskModal-' + colId);
            if (modal) modal.classList.remove('active');
        };
    });
    // Fermer modale tâche en cliquant sur le fond
    document.querySelectorAll('.modal[id^="addTaskModal-"]').forEach(modal => {
        modal.onclick = function(e) {
            if (e.target === modal) modal.classList.remove('active');
        };
    });

    attachKanbanListeners();

    // Modale édition tâche
    const editModal = document.getElementById('editTaskModal');
    const closeEditBtn = document.getElementById('closeEditTaskModal');
    const editForm = document.getElementById('editTaskForm');
    const editFormBtn = document.getElementById('editTaskFormBtn');
    closeEditBtn.onclick = () => editModal.classList.remove('active');
    window.onclick = (e) => { if (e.target === editModal) editModal.classList.remove('active'); };

    // Ajout dynamique de libellé
    const addLabelForm = document.getElementById('addLabelForm');
    const addLabelBtn = document.getElementById('addLabelBtn');
    addLabelBtn.onclick = function(e) {
        e.preventDefault();
        const name = document.getElementById('newLabelName').value.trim();
        const color = document.getElementById('newLabelColor').value;
        const projectId = {{ project.id }};
        if (!name) return;
        fetch('/api/label/add.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, color, project_id: projectId })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                // Ajouter le label à la liste
                const list = document.getElementById('editLabelsList');
                const label = document.createElement('label');
                label.className = 'edit-label-item';
                label.innerHTML = `<input type="checkbox" name="edit_task_labels[]" value="${data.label.id}" class="edit-task-label-checkbox" data-label-id="${data.label.id}" checked>
                    <span class="task-label" style="background: ${data.label.color}; color: #fff;">${data.label.name}</span>`;
                list.appendChild(label);
                document.getElementById('newLabelName').value = '';
                document.getElementById('newLabelColor').value = '#43e97b';
            } else {
                alert(data.error || 'Erreur lors de l\'ajout du libellé.');
            }
        })
        .catch(() => alert('Erreur lors de l\'ajout du libellé.'));
    };

    // Soumission AJAX du formulaire d'édition de tâche
    editTaskFormBtn.onclick = function(e) {
        e.preventDefault();
        const taskId = document.getElementById('edit_task_id').value;
        const title = document.getElementById('edit_task_title').value.trim();
        const description = document.getElementById('edit_task_description').value.trim();
        const labels = Array.from(document.querySelectorAll('.edit-task-label-checkbox:checked')).map(cb => cb.value);
        fetch('/api/task/edit.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: taskId, title, description, labels })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                // Mettre à jour le DOM de la tâche
                const taskElem = document.querySelector('.kanban-task[data-task="' + taskId + '"]');
                if (taskElem) {
                    taskElem.setAttribute('data-title', title);
                    taskElem.setAttribute('data-description', description);
                    taskElem.setAttribute('data-labels', labels.join(','));
                    taskElem.querySelector('strong').textContent = title;
                    taskElem.querySelector('p').textContent = description;
                    // Mettre à jour les badges
                    const labelsDiv = taskElem.querySelector('.task-labels');
                    labelsDiv.innerHTML = '';
                    data.labels.forEach(label => {
                        const span = document.createElement('span');
                        span.className = 'task-label';
                        span.style.background = label.color;
                        span.style.color = '#fff';
                        span.textContent = label.name;
                        labelsDiv.appendChild(span);
                    });
                }
                document.getElementById('editTaskModal').classList.remove('active');
            } else {
                alert(data.error || 'Erreur lors de la modification de la tâche.');
            }
        })
        .catch(() => alert('Erreur lors de la modification de la tâche.'));
    };

    // Soumission AJAX du formulaire d'ajout de colonne
    const addColumnModal = document.getElementById('addColumnModal');
    if (addColumnModal) {
        const addColForm = addColumnModal.querySelector('form');
        addColForm.onsubmit = function(e) {
            e.preventDefault();
            const title = addColForm.querySelector('input[name="column_title"]').value.trim();
            if (!title) return;
            fetch('/api/column/add.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ project_id: {{ project.id }}, title })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success && data.column) {
                    const board = document.querySelector('.kanban-board');
                    const colDiv = document.createElement('div');
                    colDiv.className = 'kanban-column';
                    colDiv.setAttribute('data-column', data.column.id);
                    colDiv.innerHTML = `
                        <h3>${data.column.title}</h3>
                        <div class="kanban-tasks"></div>
                        <button class="add-task-btn" data-column="${data.column.id}">+ Nouvelle tâche</button>
                    `;
                    board.insertBefore(colDiv, document.getElementById('openAddColumnModal'));
                    addColForm.reset();
                    addColumnModal.classList.remove('active');
                    attachKanbanListeners();
                } else {
                    alert(data.error || 'Erreur lors de la création de la colonne.');
                }
            })
            .catch(() => alert('Erreur lors de la création de la colonne.'));
        };
    }

    // Soumission AJAX des formulaires d'ajout de tâche (un par colonne)
    document.querySelectorAll('.modal[id^="addTaskModal-"]').forEach(modal => {
        const form = modal.querySelector('form');
        form.onsubmit = function(e) {
            e.preventDefault();
            const columnId = form.querySelector('input[name="task_column_id"]').value;
            const title = form.querySelector('input[name="task_title"]').value.trim();
            const description = form.querySelector('textarea[name="task_description"]').value.trim();
            const labels = Array.from(form.querySelectorAll('.add-task-label-checkbox:checked')).map(cb => cb.value);
            if (!title) return;
            fetch('/api/task/add.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ column_id: columnId, title, description, labels })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success && data.task) {
                    const colDiv = document.querySelector('.kanban-column[data-column="' + columnId + '"] .kanban-tasks');
                    if (colDiv) {
                        const taskElem = document.createElement('div');
                        taskElem.className = 'kanban-task';
                        taskElem.setAttribute('draggable', 'true');
                        taskElem.setAttribute('data-task', data.task.id);
                        taskElem.setAttribute('data-column', columnId);
                        taskElem.setAttribute('data-title', data.task.title);
                        taskElem.setAttribute('data-description', data.task.description);
                        taskElem.setAttribute('data-labels', (data.task.labels||[]).map(l=>l.id).join(','));
                        let labelsHtml = '';
                        if (data.task.labels) {
                            data.task.labels.forEach(label => {
                                labelsHtml += `<span class='task-label' style='background:${label.color};color:#fff;'>${label.name}</span>`;
                            });
                        }
                        taskElem.innerHTML = `
                            <div class="task-labels">${labelsHtml}</div>
                            <strong>${data.task.title}</strong>
                            <p>${data.task.description}</p>
                        `;
                        colDiv.appendChild(taskElem);
                        attachKanbanListeners();
                    }
                    form.reset();
                    modal.classList.remove('active');
                } else {
                    alert(data.error || 'Erreur lors de la création de la tâche.');
                }
            })
            .catch(() => alert('Erreur lors de la création de la tâche.'));
        };
    });
});
</script>
{% endblock %} 